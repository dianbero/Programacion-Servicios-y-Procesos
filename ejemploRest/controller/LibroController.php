<?php

require_once "Controller.php";


class LibroController extends Controller
{
    //Lee
    public function manageGetVerb(Request $request)
    {

        $listaLibros = null;
        $id = null;
        $response = null;
        $code = null;

        //if the URI refers to a libro entity, instead of the libro collection
        if (isset($request->getUrlElements()[2])) {
            $id = $request->getUrlElements()[2];
        }


        $listaLibros = LibroHandlerModel::getLibro($id);

        if ($listaLibros != null) {
            $code = '200';

        } else {

            //We could send 404 in any case, but if we want more precission,
            //we can send 400 if the syntax of the entity was incorrect...
            if (LibroHandlerModel::isValid($id)) {
                $code = '404';
            } else {
                $code = '400';
            }

        }

        $response = new Response($code, null, $listaLibros, $request->getAccept());
        $response->generate();

    }

    //Inserta
    public function managePostVerb(Request $request)
    {
        parent::managePostVerb($request); // TODO: Change the autogenerated stub

        $id = null;
        $response = null;
        $code = null;
        $bodyConvertido = null;

        //Creación objeto libro para insertar
        //Conversión formato
        $bodyConvertido = $request->getBodyParameters();

        $codigoConvertido = $bodyConvertido->codigo;
        $tituloConvertido = $bodyConvertido->titulo;
        $numPagConvertido = $bodyConvertido->numpag;

        //Pasar datos a objeto Libro
        $objLibro = new LibroModel($codigoConvertido, $tituloConvertido, $numPagConvertido);

//        if(isset($request->getUrlElements()[2])){
//            $id = $request->getUrlElements()[2];
//        }

        //TODO implementar insert (boolean que indicará éxito o no)
        $exitoInsercion= LibroHandlerModel::insertarLibro($objLibro);

        if($exitoInsercion){
            $code = "200";
        }else{
            if(LibroHandlerModel::isValid($id)){
                $code = "404";
            }else{
                $code = "400";
            }

            $response = new Response($code, null, $objLibro, $request->getAccept());
            $response->generate();
        }
    }

    //Actualiza
    public function managePutVerb(Request $request){

        $id = null;
        $response = null;
        $code = null;
        $bodyConvertido = null;

        //Creación objeto libro para actualizar
        //Conversión formato
        $bodyConvertido = $request->getBodyParameters();

        $codigoConvertido = $bodyConvertido->codigo;
        $tituloConvertido = $bodyConvertido->titulo;
        $numPagConvertido = $bodyConvertido->numpag;

        //Pasar datos a objeto Libro
        $objLibro = new LibroModel($codigoConvertido, $tituloConvertido, $numPagConvertido);

        //TODO implementar update (boolean que indicará éxito o no)
        $exitoActualizacion= LibroHandlerModel::updateLibro($id);

        if($exitoActualizacion){
            $code = "200";
        }else{
            if(LibroHandlerModel::isValid($id)){
                $code = "404";
            }else{
                $code = "400";
            }


            $response = new Response($code, null, $objLibro, $request->getAccept());
            $response->generate();
        }
    }

    //Borrar
    public function manageDeleteVerb(Request $request){
        $id = null;
        $response = null;
        $code = null;
        $bodyConvertido = null;

        //Obtener datos para borrado
        //Conversión formato
        $bodyConvertido = $request->getBodyParameters();
        //Código para borrado
        $codigoConvertido = $bodyConvertido->codigo;

        $exitoBorrado = LibroHandlerModel::borrarLibro($codigoConvertido);

        if ($exitoBorrado) {
            $code = '200';
        }
        else {
            if (LibroHandlerModel::isValid($id)) {
                $code = '404';
            } else {
                $code = '400';
            }
        }
        $response = new Response($code, null, $request->getAccept());
        $response->generate();

    }


}